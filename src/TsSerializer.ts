import { ISerializer, SerializerData, SerializerDataArray } from "./ISerializer";
import { GetTsDefault, GetTsType } from "./SerializerTools";
import { GetDate } from "./tools";
import { ArrayType, ClassType, Dictionary, LinkType, SimpleType } from "./types";
import path from "path";

export class TsSerializer extends ISerializer {
    protected deps: Dictionary<string> = {};
    constructor(fileName: string, author: string, namespace?: string) {
        super(fileName, author, "ts", namespace);
    }

    protected begin() {
        this.store.header = `/**\n * @file ${this.fileName}.${this.extension}\n`;
        this.store.header += ` * @author ${this.author}\n * @brief Autogenerated by MckAudio TypeGenerator\n`;
        this.store.header += ` * @link https://github.com/MckAudio/TypeGenerator\n`;
        this.store.header += ` * @date ${GetDate()}\n */\n\n`;
    }

    protected end() {
        Object.entries(this.deps).forEach(dep => {
            this.store.header += `import { ${dep[0]} } from \"./${dep[1]}\";\n`;
        });
        this.store.header += `\n`;
    }

    addClassMember(name: string, member: ClassType) {
        let tmp = new SerializerData();
        tmp.sortId = this.sortId++;
        tmp.header = `${this.indent}export class ${name} `;
        if (member.parent !== undefined) {
            tmp.header += `extends ${member.parent} `;
        }
        tmp.header += `{\n`;

        tmp.footer = `}\n\n`;

        this.classes[name] = new SerializerDataArray();
        this.classes[name].addMember(tmp);
    }

    addSimpleMember(className: string, name: string, member: SimpleType) {
        let tmp = "";
        tmp += `${this.indent}\t${name}: ${GetTsType(member)}`;
        if (member.default !== undefined) {
            if (member.type === "string") {
                tmp += ` = \"${member.default}\";\n`;
            } else {
                tmp += ` = ${member.default};\n`;
            }
        } else {
            tmp += ` = ${GetTsDefault(member)};\n`;
        }
        this.classes[className].addToContent(0, tmp);
    }

    addLinkMember(className: string, name: string, member: LinkType) {
        let tmp = `${this.indent}\t${name}: ${GetTsType(member)} = ${GetTsDefault(member)};\n`;
        if (member.file !== undefined) {
            this.deps[GetTsType(member)] = `${path.basename(member.file, path.extname(member.file))}`;
        }
        this.classes[className].addToContent(0, tmp);
    }

    addArrayMember(className: string, name: string, member: ArrayType) {
        let tmp = `${this.indent}\t${name}: Array<${GetTsType(member.items)}> = [];\n`;
        this.classes[className].addToContent(0, tmp);

        if (member.items.hasOwnProperty('file')) {
            let file = (member.items as LinkType).file;
            if (file !== undefined) {
                this.deps[GetTsType(member.items)] = `${path.basename(file, path.extname(file))}`;
            }
        }
    }
}