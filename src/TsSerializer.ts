import { ISerializer, SerializerData } from "./ISerializer";
import { GetDate } from "./tools";
import { ArrayType, ClassType, LinkType, SimpleType } from "./types";

export class TsSerializer extends ISerializer {
    constructor(fileName: string, author: string, namespace?: string) {
        super(fileName, author, "ts", namespace);
    }

    protected begin() {
        this.store.header = `/**\n * @file ${this.fileName}.${this.extension}\n`;
        this.store.header += ` * @author ${this.author}\n * @brief Autogenerated by MckAudio TypeGenerator\n`;
        this.store.header += ` * @link https://github.com/MckAudio/TypeGenerator\n`;
        this.store.header += ` * @date ${GetDate()}\n */\n\n`;
    }

    protected end() {
    }

    addClassMember(name: string, member: ClassType) {
        let tmp = new SerializerData();
        tmp.header = `${this.indent}export class ${name} `;
        if (member.parent !== undefined) {
            tmp.header += `extends ${member.parent} `;
        }
        tmp.header += `{\n`;

        tmp.footer = `}\n\n`;

        this.classes[name] = tmp;
    }

    addSimpleMember(className: string, name: string, member: SimpleType) {

    }

    addLinkMember(className: string, name: string, member: LinkType) {

    }

    addArrayMember(className: string, name: string, member: ArrayType) {

    }
}