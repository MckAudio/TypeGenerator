import { ISerializer, SerializerData, SerializerDataArray } from "./ISerializer";
import { GetTsDefault, GetTsType } from "./SerializerTools";
import { GetDate } from "./tools";
import { ArrayType, ClassType, Dictionary, EnumDefinition, EnumType, LinkType, SimpleType } from "./types";
import path from "path";

export class TsSerializer extends ISerializer {
    protected deps = new Set<string>();
    constructor(fileName: string, author: string, namespace?: Array<string>) {
        super(fileName, author, "ts", namespace);
    }

    protected begin() {
        this.store.header = `/**\n * @file ${this.fileName}.${this.extension}\n`;
        this.store.header += ` * @author ${this.author}\n * @brief Autogenerated by MckAudio TypeGenerator\n`;
        this.store.header += ` * @link https://github.com/MckAudio/TypeGenerator\n`;
        //this.store.header += ` * @date ${GetDate()}\n */\n\n`;
        this.store.header += ` */\n\n`;
        
        /*
        if (this.namespaces.length > 0) {
            this.store.content = `export namespace ${this.namespaces.join('.')} {\n`;
            this.store.footer = `}\n`;
            this.indent = "\t";
        }*/
    }

    protected end() {
        this.deps.forEach(dep => {
            this.store.header += `import * as ${dep} from \"./${dep}\";\n`;
        });
        this.store.header += `\n`;
    }

    addEnumDefinition(name: string, member: EnumDefinition): void {
        let tmp = new SerializerData();
        tmp.sortId = this.sortId++;
        tmp.header = `${this.indent}export enum ${name} {\n`;
        Object.entries(member.items).forEach(e => {
            tmp.content += `${this.indent}\t${e[0]} = ${e[1]},\n`;
        })
        tmp.footer = `${this.indent}}\n\n`;

        this.enums[name] = tmp;
    }

    addClassMember(name: string, member: ClassType) {
        let tmp = new SerializerData();
        tmp.sortId = this.sortId++;
        tmp.header = `${this.indent}export class ${name} `;
        if (member.parent !== undefined) {
            tmp.header += `extends ${member.parent} `;
        }
        tmp.header += `{\n`;

        tmp.footer = `${this.indent}}\n\n`;

        this.classes[name] = new SerializerDataArray();
        this.classes[name].addMember(tmp);
    }

    addSimpleMember(className: string, name: string, member: SimpleType) {
        let tmp = "";
        tmp += `${this.indent}\t${name}: ${GetTsType(member)}`;
        if (member.default !== undefined) {
            if (member.type === "string") {
                tmp += ` = \"${member.default}\";\n`;
            } else {
                tmp += ` = ${member.default};\n`;
            }
        } else {
            tmp += ` = ${GetTsDefault(member)};\n`;
        }
        this.classes[className].addToContent(0, tmp);
    }

    addLinkMember(className: string, name: string, member: LinkType) {
        let tmp = `${this.indent}\t${name}: ${GetTsType(member)} = ${GetTsDefault(member)};\n`;
        if (member.file !== undefined) {
            let bn = path.basename(member.file, path.extname(member.file));
            tmp = `${this.indent}\t${name}: ${bn}.${GetTsType(member)} = ${GetTsDefault(member, bn)};\n`;
            this.deps.add(`${bn}`);
        }
        this.classes[className].addToContent(0, tmp);
    }

    addArrayMember(className: string, name: string, member: ArrayType) {
        let tmp = `${this.indent}\t${name}: Array<${GetTsType(member.items)}> = [];\n`;
        if (member.items.hasOwnProperty('file')) {
            let file = (member.items as LinkType).file;
            if (file !== undefined) {
                let bn = path.basename(file, path.extname(file));
                tmp = `${this.indent}\t${name}: Array<${bn}.${GetTsType(member.items)}> = [];\n`;
                this.deps.add(`${bn}`);
            }
        }
        this.classes[className].addToContent(0, tmp);
    }

    addEnumMember(className: string, name: string, member: EnumType): void {
        let tmp = `${this.indent}\t${name}: ${GetTsType(member)} = ${GetTsDefault(member)};\n`;
        this.classes[className].addToContent(0, tmp);
    }
}