import { ISerializer, SerializerData } from "./ISerializer";
import { ArrayType, ClassType, LinkType, SimpleType } from "./types";
import { GetDate } from "./tools";

export class HppSerializer extends ISerializer {
    protected extension: string = "hpp";

    protected begin() {
        this.store.header = `/**\n * @file ${this.namespaceName}.${this.extension}\n`;
        this.store.header += ` * @author ${this.author}\n * @brief Autogenerated by MckAudio TypeGenerator\n`;
        this.store.header += ` * @date ${GetDate()}\n */\n\n`;
        this.store.header += `#pragma once\n\n`;
        this.store.header += `namespace ${this.namespaceName} {\n`;
        
        this.store.footer += `} // namespace ${this.namespaceName}\n`;
    }

    end() {
    }

    addClassMember(name: string, member: ClassType) {
        let tmp = new SerializerData();
        tmp.header = `\tclass ${name} `;
        if (member.parent !== undefined) {
            tmp.header += `: public ${member.parent} `;
        }
        tmp.header += `{\n`;

        tmp.footer = `\t}; // class ${name}\n\n`;

        this.classes[name] = tmp;
    }

    addSimpleMember(className: string, name: string, member: SimpleType) {

    }

    addLinkMember(className: string, name: string, member: LinkType) {

    }

    addArrayMember(className: string, name: string, member: ArrayType) {

    }

}