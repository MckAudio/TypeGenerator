import { ISerializer, SerializerData, SerializerDataArray } from "./ISerializer";
import { GetCppNamespace, GetCppType, GetRapidType, JsonLibrary } from "./SerializerTools";
import { GetDate } from "./tools";
import { ArrayType, ClassType, EnumDefinition, EnumType, IsSimpleType, LinkType, SimpleType } from "./types";

export class CppSerializer extends ISerializer {
    private includes: Array<string> = [];

    protected lib: JsonLibrary;

    constructor(fileName: string, author: string, namespace?: Array<string>, lib: JsonLibrary = JsonLibrary.RapidJson) {
        super(fileName, author, "cpp", namespace);
        this.lib = lib;
    }

    protected begin() {
        this.store.header = `/**\n * @file ${this.fileName}.${this.extension}\n`;
        this.store.header += ` * @author ${this.author}\n * @brief Autogenerated by MckAudio TypeGenerator\n`;
        this.store.header += ` * @link https://github.com/MckAudio/TypeGenerator\n`;
        //this.store.header += ` * @date ${GetDate()}\n */\n\n`;
        this.store.header += ` */\n\n`;
        this.store.header += `#include "${this.fileName}.hpp"\n\n`;

        let indent = "";
        for (let i = 0; i < this.namespaces.length; i++)
        {
            this.store.header += `${indent}namespace ${this.namespaces[i]} {\n`;
            indent += "\t";
        }
        this.indent = indent;
        for (let i = this.namespaces.length; i > 0; i--)
        {
            indent = Array.from({length: i-1}, () => "\t").join("");
            this.store.footer += `${indent}} // namespace ${this.namespaces[i-1]}\n`;
        }
    }

    protected end() {
    }

    addEnumDefinition(name: string, member: EnumDefinition): void {
        
    }

    addClassMember(className: string, member: ClassType) {
        this.classes[className] = new SerializerDataArray();
        let cl = this.classes[className];

        if (this.lib === JsonLibrary.RapidJson) {
            // To JSON
            ["PrettyWriter", "Writer"].forEach((k, i) => {
                cl.createMember();
                cl.addToHeader(i, `${this.indent}bool ${className}::to_json(rapidjson::${k}<rapidjson::StringBuffer> &writer) const {\n`);
                cl.addToHeader(i, `${this.indent}\twriter.StartObject();\n\n`);
                cl.addToFooter(i, `${this.indent}\twriter.EndObject();\n`);
                cl.addToFooter(i, `${this.indent}\treturn true;\n`);
                cl.addToFooter(i, `${this.indent}}\n\n`);

            });

            // From JSON
            cl.createMember();
            cl.addToHeader(2, `${this.indent}bool ${className}::from_json(const rapidjson::Value &obj) {\n`);
            cl.addToFooter(2, `${this.indent}\treturn true;\n`);
            cl.addToFooter(2, `${this.indent}}\n\n`);
        } else if (this.lib === JsonLibrary.Nlohmann) {
            console.log(`Adding nlohmann functions`);
            // To JSON
            cl.createMember();
            cl.addToHeader(0, `${this.indent}void to_json(nlohmann::json &j, const ${className} &c) {\n`);
            if (member.parent !== undefined) {
                cl.addToHeader(0, `${this.indent}\tto_json(j, static_cast<${member.parent}>(c));\n`);
            }
            cl.addToFooter(0, `${this.indent}}\n\n`);
            // From JSON
            cl.createMember();
            cl.addToHeader(1, `${this.indent}void from_json(const nlohmann::json &j, ${className} &c) {\n`);
            if (member.parent !== undefined) {
                cl.addToHeader(1, `${this.indent}\tfrom_json(j, static_cast<${member.parent}>(c));\n`);
            }
            cl.addToFooter(1, `${this.indent}}\n\n`);
        }
    }

    addSimpleMember(className: string, name: string, member: SimpleType) {
        let cl = this.classes[className];
        if (this.lib === JsonLibrary.RapidJson) {
            // To JSON
            for (let i = 0; i < 2; i++) {
                cl.addToContent(i, `${this.indent}\twriter.String("${name}");\n`);
                cl.addToContent(i, `${this.indent}\twriter.${GetRapidType(member)[0]}(${name}${GetRapidType(member)[1]});\n\n`);
            }

            // From JSON
            cl.addToContent(2, `${this.indent}\t${name} = obj["${name}"].Get${GetRapidType(member)[0]}();\n\n`);
        } else if (this.lib === JsonLibrary.Nlohmann) {
            // To JSON
            cl.addToContent(0, `${this.indent}\tj["${name}"] = c.${name};\n`);
            // From JSON
            if (member.newProperty === true) {
                let tmp = `${GetCppType(member)}(`;
                if (member.default !== undefined) {
                    if (member.type === "string") {
                        tmp += `\"${member.default}\"`;
                    } else {
                        tmp += `${member.default}`;
                    }
                }
                tmp += `)`;
                cl.addToContent(1, `${this.indent}\ttry {\n`);
                cl.addToContent(1, `${this.indent}\t\tc.${name} = j.at("${name}").get<${GetCppType(member)}>();\n`);
                cl.addToContent(1, `${this.indent}\t} catch(std::exception &e) {\n`);
                cl.addToContent(1, `${this.indent}\t\tc.${name} = ${tmp};\n`);
                cl.addToContent(1, `${this.indent}\t}\n`);
            } else {
                cl.addToContent(1, `${this.indent}\tc.${name} = j.at("${name}").get<${GetCppType(member)}>();\n`);
            }
        }
    }

    addLinkMember(className: string, name: string, member: LinkType) {
        let cl = this.classes[className];
        if (this.lib === JsonLibrary.RapidJson) {
            // To JSON 
            for (let i = 0; i < 2; i++) {
                cl.addToContent(i, `${this.indent}\twriter.String("${name}");\n`)
                cl.addToContent(i, `${this.indent}\t${name}.to_json(writer);\n\n`);
            }

            // From JSON
            cl.addToContent(2, `${this.indent}\t${name}.from_json(obj["${name}"]);\n\n`);
        } else if (this.lib === JsonLibrary.Nlohmann) {
            // To JSON
            cl.addToContent(0, `${this.indent}\tj["${name}"] = c.${name};\n`);
            // From JSON
            if (member.newProperty === true) {
                cl.addToContent(1, `${this.indent}\ttry {\n`);
                cl.addToContent(1, `${this.indent}\t\tc.${name} = j.at("${name}").get<${GetCppNamespace(member)}${GetCppType(member)}>();\n`);
                cl.addToContent(1, `${this.indent}\t} catch(std::exception &e) {\n`);
                cl.addToContent(1, `${this.indent}\t\tc.${name} = ${GetCppNamespace(member)}${GetCppType(member)}();\n`);
                cl.addToContent(1, `${this.indent}\t}\n`);
            } else {
                cl.addToContent(1, `${this.indent}\tc.${name} = j.at("${name}").get<${GetCppNamespace(member)}${GetCppType(member)}>();\n`);
            }
        }
    }

    addArrayMember(className: string, name: string, member: ArrayType) {
        let cl = this.classes[className];
        if (this.lib === JsonLibrary.RapidJson) {
            // To JSON
            for (let i = 0; i < 2; i++) {
                cl.addToContent(i, `${this.indent}\twriter.String("${name}");\n`)
                cl.addToContent(i, `${this.indent}\twriter.StartArray();\n`);
                cl.addToContent(i, `${this.indent}\tfor(size_t i = 0; i < ${name}.size(); i++) {\n`);
                if (IsSimpleType(member.items)) {
                    cl.addToContent(i, `${this.indent}\t\twriter.${GetRapidType(member.items)[0]}(${name}[i]${GetRapidType(member.items)[1]});\n`);
                } else {
                    cl.addToContent(i, `${this.indent}\t\t${name}[i].to_json(writer);\n`);
                }
                cl.addToContent(i, `${this.indent}\t}\n`);
                cl.addToContent(i, `${this.indent}\twriter.EndArray();\n\n`);
            }


            // From JSON
            cl.addToContent(2, `${this.indent}\t${name}.clear();\n`);
            cl.addToContent(2, `${this.indent}\tfor(auto &v : obj["${name}"].GetArray()) {\n`);
            if (IsSimpleType(member.items)) {
                cl.addToContent(2, `${this.indent}\t\t${name}.push_back(v.Get${GetRapidType(member.items)[0]}());\n`);
            } else {
                cl.addToContent(2, `${this.indent}\t\t${name}.push_back(${(member.items as LinkType).name}());\n`);
                cl.addToContent(2, `${this.indent}\t\t${name}.back().from_json(v);\n`);
            }
            cl.addToContent(2, `${this.indent}\t}\n\n`);
        } else if (this.lib === JsonLibrary.Nlohmann) {
            // To JSON
            cl.addToContent(0, `${this.indent}\tj["${name}"] = c.${name};\n`);
            // From JSON
            if (member.newProperty === true) {
                cl.addToContent(1, `${this.indent}\ttry {\n`);
                cl.addToContent(1, `${this.indent}\t\tc.${name} = j.at("${name}").get<std::vector<${GetCppNamespace(member.items as LinkType)}${GetCppType(member.items)}>>();\n`);
                cl.addToContent(1, `${this.indent}\t} catch(std::exception &e) {\n`);
                cl.addToContent(1, `${this.indent}\t\tc.${name} = std::vector<${GetCppNamespace(member.items as LinkType)}${GetCppType(member)}>();\n`);
                cl.addToContent(1, `${this.indent}\t}\n`);
            } else {
                cl.addToContent(1, `${this.indent}\tc.${name} = j.at("${name}").get<std::vector<${GetCppNamespace(member.items as LinkType)}${GetCppType(member.items)}>>();\n`);
            }
        }
    }

    addEnumMember(className: string, name: string, member: EnumType): void {
        let cl = this.classes[className];
        if (this.lib === JsonLibrary.RapidJson) {
            // To JSON
            for (let i = 0; i < 2; i++) {
                cl.addToContent(i, `${this.indent}\twriter.String("${name}");\n`);
                cl.addToContent(i, `${this.indent}\twriter.${GetRapidType(member)[0]}(${name}${GetRapidType(member)[1]});\n\n`);
            }

            // From JSON
            cl.addToContent(2, `${this.indent}\t${name} = obj["${name}"].Get${GetRapidType(member)[0]}();\n\n`);
        } else if (this.lib === JsonLibrary.Nlohmann) {
            // To JSON
            cl.addToContent(0, `${this.indent}\tj["${name}"] = c.${name};\n`);
            // From JSON
            if (member.newProperty === true) {
                let tmp = `${GetCppType(member)}(`;
                if (member.default !== undefined) {
                    tmp += `${GetCppType(member)}::${member.default}`;
                }
                tmp += `)`;
                cl.addToContent(1, `${this.indent}\ttry {\n`);
                cl.addToContent(1, `${this.indent}\t\tc.${name} = j.at("${name}").get<${GetCppType(member)}>();\n`);
                cl.addToContent(1, `${this.indent}\t} catch(std::exception &e) {\n`);
                cl.addToContent(1, `${this.indent}\t\tc.${name} = ${tmp};\n`);
                cl.addToContent(1, `${this.indent}\t}\n`);
            } else {
                cl.addToContent(1, `${this.indent}\tc.${name} = j.at("${name}").get<${GetCppType(member)}>();\n`);
            }
        }
    }
}